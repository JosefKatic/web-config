import { clone, commit, push, add, pull } from 'isomorphic-git';
import http from 'isomorphic-git/http/node';
import { Processor, WorkerHost } from '@nestjs/bullmq';
import { Logger } from '@nestjs/common';
import { Job } from 'bullmq';
import { readFile, writeFile } from 'fs/promises';
import fs from 'fs';
import { ConfigService } from '@nestjs/config';
@Processor('device')
export class DeviceConsumer extends WorkerHost {
  private readonly logger = new Logger(DeviceConsumer.name);
  constructor(private configService: ConfigService) {
    super();
  }

  async process(
    job: Job<
      {
        hostname: string;
        username: string;
        type: 'SYSTEM' | 'HOME';
        updatedConfig: any[];
      },
      boolean,
      string
    >,
  ): Promise<any> {
    return this.deploy(job);
  }

  convertArrayToObject(data) {
    let dataArr = data.split('\n').filter((line) => line.includes('='));
    let parsedArr = [];
    for (const line of dataArr) {
      const [key, value] = line.split('=');
      parsedArr.push([key.trim(), value.trim()]);
    }
    let jsonObj = {};
    for (const [key, value] of parsedArr) {
      jsonObj[key] = value;
    }
    return jsonObj;
  }

  async deploy(
    job: Job<
      {
        hostname: string;
        username: string;
        type: 'SYSTEM' | 'HOME';
        updatedConfig: any;
      },
      boolean,
      string
    >,
  ) {
    this.logger.log(`Started deploying to ${job.data.hostname}...`);
    const commitHash = await this.commitAndPush(
      job.data.hostname,
      job.data.username,
      job.data.type,
      job.data.updatedConfig,
    );
    this.logger.log(`Finished deploying to ${job.data.hostname}...`);
    return { commitHash };
  }

  private async commitAndPush(
    hostname: string,
    username: string,
    type: 'HOME' | 'SYSTEM',
    updatedConfig,
  ) {
    const baseDir = `/srv/git/nix-config-push`;
    const systemPath = `${hostname}`;
    const homePath = `${hostname}/${username}`;
    if (!(await fs.existsSync(`${baseDir}/flake.nix`))) {
      await clone({
        fs,
        http,
        dir: baseDir,
        corsProxy: 'https://cors.isomorphic-git.org',
        url: 'https://github.com/JosefKatic/nix-config.git',
      });
    }
    await pull({
      fs,
      http,
      corsProxy: 'https://cors.isomorphic-git.org',
      dir: baseDir,
      ref: 'main',
      author: {
        name: 'web-config',
        email: 'web-config@joka00.dev',
      },
      singleBranch: true,
      onAuth: () => ({ username: this.configService.get('GITHUB_API_TOKEN') }),
    });
    const editFile = `config/${type == 'SYSTEM' ? 'nixos/' + systemPath : 'home/' + homePath}/generated.nix`;

    let data = await readFile(`${baseDir}/${editFile}`, { encoding: 'utf-8' });
    const splittedData = data.split('\n').filter((line) => line.includes('='));
    const result = {};
    for (const line of splittedData) {
      const [key, value] = line.trim().split(' = ');
      if (value.trim().endsWith(';')) {
        result[key.trim()] = value.trim().slice(0, -1);
      } else {
        result[key.trim()] = value.trim();
      }
    }
    for (const [key, value] of Object.entries(updatedConfig)) {
      const prefixedKey = type == 'SYSTEM' ? `device.${key}` : `user.${key}`;
      if (Array.isArray(value)) {
        result[prefixedKey] = `${JSON.stringify(value).replace(',', ' ')};`;
      } else if (typeof value == 'boolean' || typeof value == 'number') {
        result[prefixedKey] = `${value}`;
      } else if (
        typeof value == 'string' &&
        ['inputs.', 'config.', 'pkgs.', 'self.'].some((v) => value.includes(v))
      ) {
        result[prefixedKey] = `${value}`;
      } else {
        if (value === '') {
          continue;
        }
        result[prefixedKey] = `"${value}"`;
      }
    }
    let outputFile = `# GENERATED BY WEB-CONFIG
{
    `;
    for (const [key, value] of Object.entries(result)) {
      outputFile += `\t${key} = ${value};\n`;
    }
    outputFile += '}';

    await writeFile(
      `${baseDir}/${editFile}`,
      outputFile,
    );
    await add({
      fs,
      dir: `${baseDir}`,
      filepath: `${editFile}`,
    });
    const commitHash = await commit({
      fs,
      dir: `${baseDir}`,
      author: {
        name: 'web-config',
        email: 'web-config@joka00.dev',
      },
      message: `feat: Updated ${type.toLowerCase()} config for ${type == 'SYSTEM' ? systemPath : homePath}`,
    });
    await push({
      fs,
      http,
      dir: `${baseDir}`,
      corsProxy: 'https://cors.isomorphic-git.org',
      remote: 'origin',
      ref: 'main',
      onAuth: () => ({ username: this.configService.get('GITHUB_API_TOKEN') }),
    });
    return commitHash;
  }

  // convertObjectToArray(obj: any, prefix: string = ''): [string, any][] {
  //   const result: [string, any][] = [];

  //   for (const key in obj) {
  //     if (obj.hasOwnProperty(key)) {
  //       const value = obj[key];
  //       const dotNotatedKey = prefix ? `${prefix}.${key}` : key;
  //       if (
  //         typeof value === 'object' &&
  //         value !== null &&
  //         !Array.isArray(value)
  //       ) {
  //         result.push(...this.convertObjectToArray(value, dotNotatedKey));
  //       } else {
  //         if (Array.isArray(value)) {
  //           if (value.length < 1) {
  //             continue;
  //           }
  //           result.push([
  //             dotNotatedKey,
  //             `${JSON.stringify(value).replace(',', ' ')}`,
  //           ]);
  //         } else if (
  //           typeof value == 'boolean' ||
  //           typeof value == 'number' ||
  //           ['inputs.', 'config.', 'pkgs.', 'self.'].some((v) =>
  //             value.includes(v),
  //           )
  //         ) {
  //           result.push([dotNotatedKey, value]);
  //         } else {
  //           if (value === '') {
  //             continue;
  //           }
  //           result.push([dotNotatedKey, `"${value}"`]);
  //         }
  //       }
  //     }
  //   }
  //   return result;
  // }
}
